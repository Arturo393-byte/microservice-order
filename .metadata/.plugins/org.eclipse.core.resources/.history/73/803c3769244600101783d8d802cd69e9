package com.unir.orders.data.model;

import com.unir.orders.controller.model.OrderDto;
import com.unir.orders.data.utils.Consts;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Entity
@Table(name = "Orders")
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Builder
@ToString
//@JsonIgnoreProperties(ignoreUnknown = true)
public class Order {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	
	@Column(name = Consts.IDORDER, unique = true)
	private String idorder;
	
	@Column(name = Consts.CREATEDDATE)
	private Date createdate;
	
	@Column(name = Consts.UPDATEDDATE)
	private Date  updated;
	
	@Column(name = Consts.TOTAL_ITEMS)
	private double total_item;
	
	@Column(name = Consts.TOTAL_TAXES)
	private double total_taxes;

	@Column(name = Consts.TOTAL)
	private double total;

	@Column(name = Consts.PAYMENT_TRANSACTION_ID)
	private String PAYMENTTRANSACTIONID;
	
	@Column(name = Consts.PAYMENT_TRANSACTION_RESPONSE)
	private String PAYMENT_TRANSACTION_RESPONSE;
	
	@Column(name = Consts.STATUS)
	private String STATUS;
		
	@Column(name = Consts.COUNT)
	private int count;
	
	
   
  	//@OneToMany(mappedBy="order", cascade = CascadeType.ALL, orphanRemoval = true)
    @OneToMany(mappedBy = "order", cascade = CascadeType.ALL, orphanRemoval = true)
	private List<Orderdetails> detalleList = new ArrayList<>();
	
	public void addDetail(Orderdetails detail) {
	    if (detalleList == null) {
	        detalleList = new ArrayList<>();
	    }
	    detail.setOrder(this); // Establece la relaci√≥n inversa (muchos a uno)
	    this.detalleList.add(detail);
	}
  	
  	
  	
  	
	public void update(OrderDto orderDto) {
				
		this.createdate = orderDto.getCreateddate();
		this.updated = orderDto.getUpdateddate();
		this.total_item = orderDto.getTotal_items();
        this.total_taxes = orderDto.getTotal_taxes();
        this.total = orderDto.getTotal();        

	}

	
	
}
