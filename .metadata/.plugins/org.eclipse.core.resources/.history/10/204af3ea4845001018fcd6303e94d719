package com.unir.orders.controller;

import java.time.LocalDate;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.reactive.function.client.WebClient;

import com.fasterxml.jackson.databind.JsonNode;
import com.unir.orders.controller.model.CreateOrderRequest;
import com.unir.orders.controller.model.OrderDto;
import com.unir.orders.data.model.Order;
import com.unir.orders.data.model.Product;
import com.unir.orders.service.ApiService;
import com.unir.orders.service.OrdersService;
import reactor.core.publisher.Mono;



import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.RequestMapping;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;



@RequestMapping
@RestController
//@RequestMapping
@RequiredArgsConstructor
@Slf4j
@Tag(name = "Orders Controller", description = "Microservicio encargado de exponer operaciones CRUD sobre Orders alojados en una base de datos en memoria.")

public class OrdersController {
  
	@Autowired
    private ApiService apiService;

    @GetMapping("products/{idx}")
    public Mono<String> getPost(@PathVariable String idx) {
    	
        return apiService.getPostById(idx);
    }
	
  
	  // @Autowired
	   private final OrdersService service;
	  
	  private  WebClient webClient = WebClient.create("https://fakestoreapi.com");
	   
	   
	   
  /* @GetMapping("/orders")
    @Operation(
            operationId = "Obtener productos",
            description = "Operacion de lectura",
            summary = "Se devuelve una lista de todos los productos almacenados en la base de datos.")
    @ApiResponse(
            responseCode = "200",
            content = @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class)))
    public ResponseEntity<List<Order>> getOrders(
    		//Date created_date, Date updated_date, Double total_items, Double total_taxes ,Double total
    		
    		
    		@RequestHeader Map<String, String> headers,
            @Parameter(name = "created_date", description = "Fecha de Creacion.  Debe ser Fecha", example = "fecha", required = false)
            @RequestParam(required = false) Date created_date,
            @Parameter(name = "updated_date", description = "Fecha de  Actualizacion. Debe ser Fecha", example = "Fecha", required = false)
            @RequestParam(required = false) Date updated_date,
            @Parameter(name = "total_items", description = "Total Items. Cantidad de Registro", example = "Numerico", required = false)
            @RequestParam(required = false) Double total_items,
            @Parameter(name = "total_taxes", description = "Total taxes. Monto", example = "monto", required = false)
            @RequestParam(required = false) Double total_taxes,
            @Parameter(name = "total", description = "Total. Monto", example = "monto", required = false)
            @RequestParam(required = false) Double total
    		    		
    		) {

        log.info("headers: {}", headers);
        List<Order> Orders = service.getOrders(created_date, updated_date, total_items, total_taxes ,total);
        
        if (Orders != null) {
            return ResponseEntity.ok(Orders);
        } else {
            return ResponseEntity.ok(Collections.emptyList());
        }
    }*/

    @GetMapping("/Orders/{id_order}")
    @Operation(
            operationId = "Obtener un Order",
            description = "Operacion de lectura",
            summary = "Se devuelve un order a partir de su identificador.")
    @ApiResponse(
            responseCode = "200",
            content = @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class)))
    @ApiResponse(
            responseCode = "404",
            content = @Content(mediaType = "application/json", schema = @Schema(implementation = Void.class)),
            description = "No se ha encontrado el producto con el identificador indicado.")
    public ResponseEntity<Order> getOrder(@PathVariable String id_order) {

        log.info("Request received for product {}", id_order);
        Order order = service.getOrder(id_order);

        if (order != null) {
            return ResponseEntity.ok(order);
        } else {
            return ResponseEntity.notFound().build();
        }

    }

    @DeleteMapping("/orders/{id_order}")
    @Operation(
            operationId = "Eliminar un producto",
            description = "Operacion de escritura",
            summary = "Se elimina un producto a partir de su identificador.")
    @ApiResponse(
            responseCode = "200",
            content = @Content(mediaType = "application/json", schema = @Schema(implementation = Void.class)))
    @ApiResponse(
            responseCode = "404",
            content = @Content(mediaType = "application/json", schema = @Schema(implementation = Void.class)),
            description = "No se ha encontrado el producto con el identificador indicado.")
    public ResponseEntity<Void> deleteProduct(@PathVariable String id_order) {

        Boolean removed = service.removeOrder(id_order);

        if (Boolean.TRUE.equals(removed)) {
            return ResponseEntity.ok().build();
        } else {
            return ResponseEntity.notFound().build();
        }

    }
    @PostMapping("/orders")
    @Operation(
            operationId = "Insertar un Order",
            description = "Operacion de escritura",
            summary = "Se crea un producto a partir de sus datos orders.",
            requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(
                    description = "Datos del producto a crear.",
                    required = true,
    content = @Content(mediaType = "application/json", schema = @Schema(implementation = CreateOrderRequest.class))))
   
    @Parameter(name = "idorder", description = "id order ", example = "6", required = false) 
    @Parameter(name = "createddate", description = "Fecha de Creacion.  Debe ser Fecha", example = "2025-06-07", required = false)
    @Parameter(name = "updateddate", description = "Fecha de  Actualizacion. Debe ser Fecha", example = "2025-06-07", required = false)
    @Parameter(name = "total_items", description = "Total Items. Cantidad de Registro", example = "2", required = false)
    @Parameter(name = "total_taxes", description = "Total taxes. Monto", example = "20", required = false)
    @Parameter(name = "total", description = "Total. Monto", example = "20", required = false)
    @Parameter(name = "payment_transaction_id", description = "Id transacccion", example = "id", required = false)
    @Parameter(name = "payment_transaction_response", description = "Response de Transaccion", example = "Response", required = false)
    @Parameter(name = "status", description = "Estado", example = "Estado", required = false)
    @ApiResponse(
            responseCode = "201",
            content = @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class)))
    @ApiResponse(
            responseCode = "400",
            content = @Content(mediaType = "application/json", schema = @Schema(implementation = Void.class)),
            description = "Datos incorrectos introducidos.")
    @ApiResponse(
            responseCode = "404",
            content = @Content(mediaType = "application/json", schema = @Schema(implementation = Void.class)),
            description = "No se ha encontrado el producto con el identificador indicado.")
  
   /* public Mono<String> createOrder(@RequestBody Order order) {
    	
        return apiService.createOrder(order);
    }*/
    
    public Mono<ResponseEntity<Order>> addProduct(@RequestBody CreateOrderRequest request) {
  //  public ResponseEntity<Order> addProduct(@RequestBody CreateOrderRequest request,Order order) {           
       Order createdProduct = service.createOrder(request);
       //final Logger logger = LoggerFactory.getLogger(OrdersController.class);
       
         String id = request.getIdorder(); //order.getIdorder();
         
        return webClient.get()
                .uri("/products/"+id)
                .retrieve()        		
                .bodyToMono(JsonNode.class)                
		        .flatMap(JsonNode -> {
		            String count = JsonNode.get("price").asText();		            
		            if (Double.parseDouble(count) >= request.getTotal_items() ) {//order.getTotal_item()
		            	
		            	if (createdProduct != null) {
		            	//	logger.info("creo CreateProduct");
                        return Mono.just(ResponseEntity.status(HttpStatus.CREATED).body(createdProduct));
                        
		            	}else {
		            		return Mono.just(ResponseEntity.badRequest().build());
		            	}
		            } else {		         
		            return Mono.just(ResponseEntity.badRequest().build());
		            }
		        });    
                
   
        
      /*  if (createdProduct != null) {
            return ResponseEntity.status(HttpStatus.CREATED).body(createdProduct);
        } else {
            return ResponseEntity.badRequest().build();
        }*/
        
       
      
        
    }


    @PatchMapping("/orders/{id_order}")
    @Operation(
            operationId = "Modificar parcialmente un Order",
            description = "RFC 7386. Operacion de escritura",
            summary = "RFC 7386. Se modifica parcialmente un Order.",
            requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(
                    description = "Datos del producto a crear.",
                    required = true,
                    content = @Content(mediaType = "application/merge-patch+json", schema = @Schema(implementation = String.class))))
    @ApiResponse(
            responseCode = "200",
            content = @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class)))
    @ApiResponse(
            responseCode = "400",
            content = @Content(mediaType = "application/json", schema = @Schema(implementation = Void.class)),
            description = "Producto inválido o datos incorrectos introducidos.")
    public ResponseEntity<Order> patchProduct(@PathVariable String id_order, @RequestBody String patchBody) {

        Order patched = service.updateOrder(id_order, patchBody);
        if (patched != null) {
            return ResponseEntity.ok(patched);
        } else {
            return ResponseEntity.badRequest().build();
        }
    }


    @PutMapping("/orders/{id_order}")
    @Operation(
            operationId = "Modificar totalmente un producto",
            description = "Operacion de escritura",
            summary = "Se modifica totalmente un producto.",
            requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(
                    description = "Datos del producto a actualizar.",
                    required = true,
                    content = @Content(mediaType = "application/merge-patch+json", schema = @Schema(implementation = OrderDto.class))))
    @ApiResponse(
            responseCode = "200",
            content = @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class)))
    @ApiResponse(
            responseCode = "404",
            content = @Content(mediaType = "application/json", schema = @Schema(implementation = Void.class)),
            description = "Producto no encontrado.")
    public ResponseEntity<Order> updateProduct(@PathVariable String id_order, @RequestBody OrderDto body) {

    	Order updated = service.updateOrder(id_order, body);
        if (updated != null) {
            return ResponseEntity.ok(updated);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
    
    
    
    
    
    
    
    
    
    

}
